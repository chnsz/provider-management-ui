import CustomBreadcrumb from '@/components/Breadcrumb';
import {deleteAutoGenerateData, getAutoGenerateList, saveGenerateArchive} from '@/services/auto-generate/api';
import {Button, Col, message, Modal, Row, Space, Table, Tabs, Tag} from 'antd';
import type {ColumnsType} from 'antd/es/table';
import React, {useEffect, useState} from 'react';
import DeleteBtn from "@/components/delete";
import './auto-generate-list.less';
import {toLongDate} from "@/utils/common";
import {history, useLocation} from 'umi';
import ProviderBaseSumDialog from "@/pages/Provider/provider-base/provider-base-sum-dialog";
import InstallToolDialog from "@/pages/AutoGenerateList/install-tool-dialog";

const AutoGenerateList: React.FC = () => {
    const location = useLocation();
    const [data, setData] = useState<AutoGenerate.ProviderGenerate[]>([]);
    const [total, setTotal] = useState<number>(0);
    const [pageSize, setPageSize] = useState<number>(10);
    const [pageNum, setPageNum] = useState<number>(1);
    const [archiveTag, setArchiveTag] = useState<boolean>(location.hash.split('/').includes("archive"));

    const loadData = (pageSize: number, pageNum: number) => {
        getAutoGenerateList(pageSize, pageNum, archiveTag).then((d) => {
            setData(d.items);
            setTotal(d.total || 0);
        });
    }

    useEffect(() => {
        loadData(pageSize, pageNum);
    }, [pageSize, pageNum, archiveTag]);

    useEffect(() => {
        setArchiveTag(location.hash.split('/').includes("archive"))
    }, [location]);

    const columns: ColumnsType<AutoGenerate.ProviderGenerate> = [
        {
            title: '序号',
            dataIndex: 'id',
            key: 'id',
            width: 60,
            align: 'center',
            render: (v, r, i) => i + 1,
        },
        {
            title: '服务名称',
            dataIndex: 'productName',
            ellipsis: true,
            width: 180,
            align: 'center',
        },
        {
            title: '类型',
            dataIndex: 'providerType',
            key: 'providerType',
            align: 'center',
            width: 150,
        },
        {
            title: '版本',
            dataIndex: 'version',
            key: 'version',
            align: 'center',
            width: 70,
        },
        {
            title: <>资源名称<span style={{fontWeight: 'normal'}}>（点击查看基线）</span></>,
            dataIndex: 'providerName',
            key: 'providerName',
            ellipsis: true,
            render: (v, row) =>
                <ProviderBaseSumDialog
                    text={v}
                    element={'yes'}
                    providerType={row.providerType}
                    providerName={row.providerName}
                />,
        },
        {
            title: 'API变更',
            dataIndex: 'apiCount',
            key: 'apiCount',
            align: 'center',
            width: 200,
            render: () => '',
        },
        {
            title: 'API数量',
            dataIndex: 'apiCount',
            key: 'apiCount',
            align: 'center',
            width: 100,
        },
        {
            title: '最后修改',
            dataIndex: 'lastUpdateBy',
            align: 'center',
            width: 150,
        },
        {
            title: '修改日期',
            dataIndex: 'updated',
            align: 'center',
            width: 180,
            render: toLongDate,
        },
        {
            title: '创建人',
            dataIndex: 'createdBy',
            key: 'createdBy',
            align: 'center',
            width: 150,
        },
        {
            title: '创建日期',
            dataIndex: 'created',
            align: 'center',
            width: 180,
            render: toLongDate,
        },
        {
            title: '操作',
            dataIndex: 'operate',
            align: 'center',
            width: 150,
            render: (v, record) => {
                let saveArchiveBtn = <a rel="noreferrer" onClick={() => {
                    saveGenerateArchive(record.id).then(() => message.info('归档成功'));
                }}>存档</a>
                if (archiveTag) {
                    saveArchiveBtn = <>&nbsp;</>
                }

                return (
                    <Space>
                        <a rel="noreferrer" onClick={() => history.push(`/auto-generate-provider#/id/${record.id}`)}>
                            编辑
                        </a>
                        {saveArchiveBtn}
                        <DeleteBtn text={'删除'}
                                   title={'删除确认'}
                                   link
                                   content={<div>确定要删除吗？删除后不可恢复</div>}
                                   onOk={() => onDeleteData(record)}
                        />
                    </Space>
                );
            },
        },
    ];

    const onDeleteData = (record: AutoGenerate.ProviderGenerate) => {
        if (!record.id) {
            return;
        }
        deleteAutoGenerateData(record.id).then(() => loadData(pageSize, pageNum));
    }

    const getColumn = () => {
        if (!archiveTag) {
            return columns.filter(t => t.key !== 'version');
        }

        return columns;
    }

    return <>
        <CustomBreadcrumb items={[{title: '首页'}, {title: '自动生成'}]}/>
        <div className={'auto-generate-list'}>
            <Row>
                <Col span={12}>
                    <Button type="primary" size='middle'
                            onClick={() => history.push(`/auto-generate-provider`)}>新建</Button>
                    {
                        archiveTag ?
                            <Button size='middle' type={'link'}
                                    onClick={() => history.push(`/auto-generate-provider-list`)}>
                                返回列表
                            </Button> :
                            <Button size='middle' type={'link'}
                                    onClick={() => history.push(`/auto-generate-provider-list#/archive`)}>
                                查看归档列表
                            </Button>
                    }
                </Col>
                <Col span={12} style={{textAlign: 'right'}}>
                    <InstallToolDialog/>
                </Col>
            </Row>
            <Table
                style={{marginTop: '20px'}}
                columns={getColumn()}
                dataSource={data}
                size={'middle'}
                rowKey={(record) => record.id}
                pagination={{
                    defaultCurrent: 1,
                    total: total,
                    size: 'default',
                    pageSize: pageSize,
                    current: pageNum,
                    showTotal: (total) => `总条数: ${total}`,
                    onShowSizeChange: (current, size) => {
                        setPageSize(size);
                    },
                    onChange: (page, size) => {
                        setPageSize(size);
                        setPageNum(page);
                    },
                }}
            />
        </div>
    </>
}
export default AutoGenerateList;
